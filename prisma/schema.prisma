// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  publicId       String    @unique @default(uuid()) @map("public_id")
  name           String
  username       String    @unique
  email          String    @unique
  birthDate      DateTime? @map("birth_date")
  description    String?
  profilePicture String?   @map("profile_picture")
  loginAttempts  Int       @default(0) @map("login_attempts")
  lastLogin      DateTime? @map("last_login")
  passwordDigest String    @map("password_digest")
  role           USER_ROLE @default(NORMAL_USER)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  isPrivate      Boolean   @default(false) @map("is_private")

  posts               Posts[]
  comments            Comment[]
  reposts             Repost[]
  likes               Like[]
  AuthenticationAudit AuthenticationAudit[]

  followers Follow[] @relation("UserFollowersRelation")
  following Follow[] @relation("UserFollowingRelation")

  @@index([id])
  @@map("users")
}

enum USER_ROLE {
  ADMIN
  NORMAL_USER
}

model AuthenticationAudit {
  id         Int                   @id @default(autoincrement())
  ipAddress  String?               @map("ip_address")
  remotePort String?               @map("remote_port")
  browser    String?
  status     AUTHENTICATION_STATUS
  userId     Int?                  @map("user_id")
  user       User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime              @default(now()) @map("created_at")

  @@map("authentication_audit")
}

enum AUTHENTICATION_STATUS {
  SUCCESS
  USER_NOT_EXISTS
  INCORRECT_PASSWORD
  BLOCKED
}

model Posts {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @default(uuid()) @map("public_id")
  content   String
  image     String?
  likes     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  author User   @relation(fields: [userId], references: [publicId], onDelete: Cascade)

  comments Comment[]
  reposts  Repost[]
  Like     Like[]

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @default(uuid()) @map("public_id")
  likes     Int      @default(0)
  content   String
  image     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [publicId], onDelete: Cascade)

  postId String @map("post_id")
  post   Posts  @relation(fields: [postId], references: [publicId], onDelete: Cascade)

  parentId String?   @map("parent_id")
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [publicId], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  reposts Repost[]
  Like    Like[]

  @@map("comments")
}

model Repost {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @default(uuid()) @map("public_id")
  createdAt DateTime @default(now()) @map("created_at")

  postId String? @map("post_id")
  post   Posts?  @relation(fields: [postId], references: [publicId], onDelete: Cascade)

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [publicId], onDelete: Cascade)

  commentId String?  @map("comment_id")
  comment   Comment? @relation(fields: [commentId], references: [publicId], onDelete: Cascade)

  @@map("reposts")
}

model Follow {
  id Int @id @default(autoincrement())

  followerId String
  follower   User   @relation("UserFollowingRelation", fields: [followerId], references: [publicId], onDelete: Cascade)

  followingId String
  following   User   @relation("UserFollowersRelation", fields: [followingId], references: [publicId], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("follows")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [publicId], onDelete: Cascade)

  postId String? @map("post_id")
  post   Posts?  @relation(fields: [postId], references: [publicId], onDelete: Cascade)

  commentId String?  @map("comment_id")
  comment   Comment? @relation(fields: [commentId], references: [publicId], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("likes")
}
